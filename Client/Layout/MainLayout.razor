@using BlazorApp.Client.Component
@using BlazorApp.Client.Theme
@using BlazorApp.Client.Theme.Enum
@using BlazorApp.Client.Utility
@inherits LayoutComponentBase
@inject ThemeSetup themeSetp
@inject IJSRuntime JSRuntime

<MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">Pritesh More</MudText>
        <MudSpacer />
        <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle" />

        <MudSelect T="ThemeSelector" ValueChanged="OnThemeChanged" Label="Select your Theme" Variant="Variant.Outlined" Clearable Style="width: 50px;">
            <MudSelectItem Value="ThemeSelector.Default">Default</MudSelectItem>
            <MudSelectItem Value="ThemeSelector.Skyblue">Skyblue</MudSelectItem>
        </MudSelect>


        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>
    <MudMainContent Class="mt-16 pa-4">
        @Body
    </MudMainContent>
</MudLayout>


<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool _drawerOpen = true;
    private bool _isDarkMode = true;
    private MudTheme? _theme = null;

    protected override void OnInitialized()
    {
        _theme = themeSetp.GetTheme(ThemeSelector.Default);
        base.OnInitialized();
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }

    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Call JavaScript function to hide the loader once Blazor finishes rendering
            await JSRuntime.InvokeVoidAsync("hideLottieLoader");
        }
    }

    public void OnThemeChanged(ThemeSelector newTheme)
    {
        _theme = themeSetp.GetTheme(newTheme);
    }


}


